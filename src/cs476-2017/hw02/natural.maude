fmod NAT-MIXFIX is
    sort Natural .
    op 0 : -> Natural [ctor] .
    op s_ : Natural -> Natural [ctor] .
    op _+_ : Natural Natural -> Natural .
    op _*_ : Natural Natural -> Natural .
    vars N M : Natural .
    eq N + 0 = N .
    eq N + s M = s(N + M) .
    eq N * 0 = 0 .
    eq N * s M = N + (N * M) .
endfm

fmod NAT-ORDER is
    protecting NAT-MIXFIX .
    protecting BOOL .

    vars N M : Natural .

    op _>_ : Natural Natural -> Bool .
    eq 0 > M = false .
    eq s(N) > 0 = true .
    eq s(M) > s(N) = M > N .

    op _>=_ : Natural Natural -> Bool .
    eq M >= N = M == N or M > N .

    op min : Natural Natural -> Natural .
    eq min(M, N) = if M >= N then N else M fi .

    op max : Natural Natural -> Natural .
    eq max(M, N) = if M >= N then M else N fi .
endfm

fmod NAT-EVEN-ODD is
    protecting NAT-MIXFIX .
    protecting BOOL .

    var N : Natural .

    op even : Natural -> Bool .
    eq even(0)     = true .
    eq even(s 0)   = false .
    eq even(s s N) = even(N) .

    op odd : Natural -> Bool .
    eq odd(N) = not even(N) .
endfm

fmod NAT-FACTORIAL is
    protecting NAT-MIXFIX .

    var M : Natural .
    op _ ! : Natural -> Natural .
    eq M ! = factorial(M) .

    op factorial : Natural -> Natural .
    eq factorial(0) = s 0 .
    eq factorial(s M) = (s M) * factorial(M) .
endfm

fmod HW02 is
    protecting NAT-ORDER .
    protecting NAT-EVEN-ODD .
    protecting NAT-FACTORIAL .
endfm

--- Tests
--- =====

--- Addition
reduce s s 0 + s s 0        == s s s s 0 .

--- Greater than
reduce 0 > 0                == false .
reduce 0 > s 0              == false .
reduce s s 0 > s s s 0      == false .
reduce s s s 0 > s s 0      == true  .
reduce s s 0 > s s 0        == false .
reduce s s 0 > 0            == true  .
reduce 0 > s s 0            == false .

--- Greater than or equal
reduce 0 >= 0               == true  .
reduce s s 0 >= s s s 0     == false .
reduce s s s 0 >= s s 0     == true  .
reduce s s 0 >= s s 0       == true  .
reduce s s 0 >= 0           == true  .
reduce 0 >= s s 0           == false .

--- Min / Max
reduce min(0, 0)            == 0     .
reduce min(0, s 0)          == 0     .
reduce min(s 0, 0)          == 0     .
reduce min(s 0, s s s 0)    == s 0   .

reduce max(0, 0)            == 0     .
reduce max(0, s 0)          == s 0   .
reduce max(s 0, 0)          == s 0   .
reduce max(s 0, s s s 0)    == s s s 0 .

--- Even / Odd
reduce even(0)              == true  .
reduce even(s s s s s s 0)  == true  .
reduce even(s 0)            == false .
reduce even(s s s s s 0  )  == false .

--- Factorial
reduce factorial(0)         == s 0 .
reduce factorial(s s 0)     == s s 0 .
reduce factorial(s s s 0)   == s s s s s s 0 .

--- Maude stays in the interpreter if running this file
--- from the command line. May be there's a nicer way of running tests
--- non-interactively?
quit
