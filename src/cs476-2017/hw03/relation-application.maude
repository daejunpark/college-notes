fmod RELATION-APPLICATION is protecting RAT .

    sorts Pair NatSet RatSet Rel .
    subsort Pair < Rel .
    subsort Nat < NatSet < RatSet .
    subsort Rat < RatSet .

    op [_,_] : Nat Rat -> Pair [ctor] .                  *** Pair is cartesian product Nat x Rat
    op mt : -> NatSet [ctor] .                           *** empty set of naturals
    op null : -> Rel [ctor] .                            *** empty relation

    op _,_ : NatSet NatSet -> NatSet [ctor assoc comm id: mt] .      *** union
    op _,_ : RatSet RatSet -> RatSet [ctor assoc comm id: mt] .      *** union
    op _,_ : Rel Rel -> Rel [ctor assoc comm id: null] .             *** union

    op _in_ : Nat NatSet -> Bool .                       *** membership
    op _[_] : Nat Rel -> RatSet .                        *** relation application to a number
    op dom : Rel -> NatSet .                             *** domain of a relation
    op pfun : Rel -> Bool .                              *** partial function predicate

    vars n m : Nat .
    var    r : Rat .
    var    P : Pair .
    var    S : NatSet .
    var    R : Rel .

    eq n,n = n .                             *** idempotency
    eq P,P = P .                             *** idempotency

    eq n in mt = false .                     *** membership
    eq n in m,S = (n == m) or n in S .       *** membership

--- Domain
--- ======
    eq dom(null) = mt . 
    eq dom([n,r], R) = n, dom(R) .

--- Partial Function
--- ================
    eq pfun(null) = true .
    eq pfun([n, r], R) = not ( n in dom(R)) and pfun(R) .

--- Relation application
--- ====================
    eq n [null] = mt .
    eq n [[n, r], R] = r, (n[R]) .
    eq n [[m, r], R] = n[R] [owise] .
endfm


--- Tests
--- =====

reduce dom( null )                == mt .
reduce dom( [ 1 , 3 ] )           == 1 .
reduce dom( [ 1 , 3 ], [1, 75 ] ) == 1 .
reduce dom( [ 1 , 3 ], [2, 75 ] ) == 1, 2 .

reduce pfun(null) .
reduce pfun([1, 3]) .
reduce pfun([1, 3], [1, 3]) .
reduce pfun([1, 3], [2, 3]) .
reduce pfun([1, 3], [2, 3], [3, 4], [1, 4]) == false .

reduce 5 [ null ] == mt .
reduce 5 [ [1, 3] ] == mt .
reduce 5 [ [1, 4], [2, 5] ] == mt .
reduce 5 [ [5, 6] ] == 6 .
reduce 5 [ [1, 4], [5, 3], [6, 3], [5, 10000] ] == 3, 10000 .
