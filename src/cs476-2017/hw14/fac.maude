load model-checker.maude

set include BOOL off .

fmod IMP-SYNTAX is
  pr TRUTH . --- here we use the built-in booleans because they can go in conditional equations
  sort Id NzNat Nat .
  subsort NzNat < Nat .
  ops a b c d e f g i j k l m n o p q r s t u v w x y z : -> Id [ctor] .
  op  _,   : Id        -> Id    [ctor] .
  --- op true  :           -> Bool  [ctor] .
  --- op false :           -> Bool  [ctor] .
  op  0    :           -> Nat   [ctor] .
  op  1    :           -> NzNat [ctor] .
  op  _+_  : Nat Nat   -> Nat   [ctor assoc comm id: 0] .
  op  _+_  : NzNat Nat -> NzNat [ctor ditto] .
  op  _*_  : Nat Nat   -> Nat   [ctor assoc comm] .

  sorts  BoolExp BoolRedex . 
  sorts  NatExp  NatRedex .
  subsort Id < NatRedex .
  subsort Nat  NatRedex  < NatExp  .
  subsort Bool BoolRedex < BoolExp .
  op (_&&_) : BoolExp BoolExp -> BoolRedex [ctor] . 
  op (_||_) : BoolExp BoolExp -> BoolRedex [ctor] .
  op  ~_    : BoolExp         -> BoolRedex [ctor] .
  op (_<_)  : NatExp NatExp   -> BoolRedex [ctor] .
  op (_<=_) : NatExp NatExp   -> BoolRedex [ctor] .
  op (_=_)  : NatExp NatExp   -> BoolRedex [ctor] .
  op  _-_   : NatExp NatExp   -> NatRedex  [ctor] .
  op  _+_   : NatRedex NatExp -> NatRedex  [ditto] .
  op  _+_   : NatExp NatExp   -> NatExp    [ditto] .
  op  _*_   : NatExp NatExp   -> NatExp    [ditto] .

  sort BasicStmt Stmt .
  subsort BasicStmt < Stmt .
  --- stmts have id: skip; leading to a simpler semantics
  --- but not suitable for symbolic reasoning with unification
  op  _;_  : Stmt Stmt -> Stmt [ctor assoc id: skip prec 60] .
  op  skip : -> BasicStmt [ctor] .
  op  _:=_ : Id NatExp -> BasicStmt [ctor] .
  op  if_then_fi : BoolExp Stmt -> BasicStmt [ctor] .
  op  while_do_od : BoolExp Stmt -> BasicStmt [ctor] .
endfm

fmod IMP-DATA is pr IMP-SYNTAX .
  op  ~Bool_                : Bool -> Bool .
  ops (_/\Bool_) (_\/Bool_) : Bool Bool -> Bool .
  op  _-Nat_                : Nat Nat -> Nat .
  ops (_<Nat_)  (_<=Nat_) : Nat Nat -> Bool .
  op  (_=Nat_) : Nat Nat -> Bool [comm] .
  op  (_*Nat_) : Nat Nat -> Nat  [assoc comm] .
  var N M : Nat . var P R Q : NzNat . var B : Bool .
  eq         ~Bool  true    = false [variant] .
  eq         ~Bool  false   = true  [variant] .
  eq true    /\Bool B       = B     [variant] .
  eq false   /\Bool B       = false [variant] .
  eq true    \/Bool B       = true  [variant] .
  eq false   \/Bool B       = B     [variant] .
  eq N       -Nat  (N + M)  = 0     [variant] .
  eq (N + P) -Nat   N       = P     [variant] .
  eq N       <Nat   N + P   = true  [variant] .
  eq N + M   <Nat   N       = false [variant] .
  eq N       <=Nat  N + M   = true  [variant] .
  eq N + P   <=Nat  N       = false [variant] .
  eq N + P    =Nat  N       = false [variant] .
  eq N        =Nat  N       = true  [variant] .
  eq N       *Nat   0       = 0     [variant] .
  eq N       *Nat   1       = N     [variant] .
  eq (P + R) *Nat   Q       = (P *Nat Q) + (R *Nat Q) .
endfm

fmod IMP-MEM is pr IMP-SYNTAX .
  sort PreMemory Memory .
  op [_,_] : Id Nat -> PreMemory [ctor] .
  op none  : -> PreMemory [ctor] .
  op __    : PreMemory PreMemory -> PreMemory [ctor assoc comm id: none] .
  op {_}   : PreMemory -> Memory [ctor] .
  op err   : -> [Memory] [ctor] .
  var I : Id . var J K : Nat . var M : PreMemory .
  eq {[I,J] [I,K] M} = err .
endfm

fmod IMP-EVAL is pr IMP-MEM + IMP-DATA .
  op eval : Memory NatExp  -> [Nat]  .
  op eval : Memory BoolExp -> [Bool] .
  var NE1 NE2 : NatExp  . var B : Bool . var NR1 NR2 : NatRedex . var P : NzNat .
  var BE1 BE2 : BoolExp . var N : Nat  . var M : Memory . var PM : PreMemory . var I : Id .
  --- recursive case
  eq eval(M,NR1 + P  )  = eval(M,NR1) + P [variant] .
  eq eval(M,NR1 + NR2)  = eval(M,NR1) + eval(M,NR2) [variant] .
  eq eval(M,NE1 - NE2)  = eval(M,NE1) -Nat   eval(M,NE2) [variant] .
  eq eval(M,NE1 * NE2)  = eval(M,NE1) *Nat   eval(M,NE2) [variant] .
  eq eval(M,BE1 && BE2) = eval(M,BE1) /\Bool eval(M,BE2) [variant] .
  eq eval(M,BE1 || BE2) = eval(M,BE1) \/Bool eval(M,BE2) [variant] .
  eq eval(M,NE1 <  NE2) = eval(M,NE1) <Nat   eval(M,NE2) [variant] .
  eq eval(M,NE1 <= NE2) = eval(M,NE1) <=Nat  eval(M,NE2) [variant] .
  eq eval(M,NE1  = NE2) = eval(M,NE1)  =Nat  eval(M,NE2) [variant] .
  eq eval(M,~ BE1)      = ~Bool eval(M,BE1) [variant] .
  --- base case
 ceq eval({[I,N] PM},I) = N if {[I,N] PM} =/= err .
  eq eval(M,N)          = N [variant] .
  eq eval(M,B)          = B [variant] .
endfm

mod IMP-NUMBERS is pr IMP-SYNTAX .
  ops 2 3 4 5 6 7 8 9 10 : -> NzNat .
  eq 2  = 1 + 1 .
  eq 3  = 1 + 1 + 1 .
  eq 4  = 1 + 1 + 1 + 1 .
  eq 5  = 1 + 1 + 1 + 1 + 1 .
  eq 6  = 1 + 1 + 1 + 1 + 1 + 1 .
  eq 7  = 1 + 1 + 1 + 1 + 1 + 1 + 1 .
  eq 8  = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 .
  eq 9  = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 .
  eq 10 = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 .
endm

mod IMP-SEMANTICS is pr IMP-EVAL + IMP-SYNTAX + IMP-NUMBERS .
  sort ImpState .
  op _|_ : Stmt [Memory] -> ImpState [ctor prec 61] .

  var P : PreMemory . var NE : NatExp . var S S' : Stmt      . var I  : Id      .
  var M : Memory    . var N  : Nat    . var BR   : BoolRedex . var BE : BoolExp .

  rl I := NE            ; S' | {[I,N] P} => S' | {[I,eval({[I,N] P},NE)] P} .
  rl if BR    then S fi ; S' | M         => if eval(M,BR) then S fi ; S' | M .
  rl if true  then S fi ; S' | M         => S ; S' | M .
  rl if false then S fi ; S' | M         => S' | M .
  rl while BE do S od   ; S' | M         => if BE then S ; while BE do S od fi ; S' | M .
endm

mod MULTIPLICATION is pr IMP-SEMANTICS .
  op mult      : -> Stmt [ctor] .
  op mult-init : Nat Nat -> Memory .
  var N M : Nat .
  eq mult           = while 0 < n do s := s + m ; n := n - 1 od .
  eq mult-init(N,M) = {[m,M] [n,N] [s,0]} .
endm

mod EXAMPLE is pr MULTIPLICATION . inc MODEL-CHECKER *
     (sort Nat to Nat*,sort NzNat to NzNat*,
      op _+_ to _.+_, op _*_ to _.*_, op _<_ to _.<_, op _<=_ to _.<=_) .
  subsort ImpState < State .
  --- predicates
  op mult-inv    : Nat  -> Prop .
  op pgm-or-skip : Stmt -> Prop .
  --- var decls
  var ST ST' : Stmt . var E : Memory . var S N M T : Nat .
  --- predicates
  eq (ST   | {[s,S] [n,N] [m,M]}) |= mult-inv(T) = S + (M *Nat N) == T .
  --- given
  eq (ST   | E) |= pgm-or-skip(ST ) = true  .
  eq (skip | E) |= pgm-or-skip(ST ) = true  .
  eq (ST   | E) |= pgm-or-skip(ST') = false [owise] .
endm

--- red modelCheck(mult | mult-init(0,1), [] (pgm-or-skip(mult) -> mult-inv(0))) .
--- red modelCheck(mult | mult-init(1,0), [] (pgm-or-skip(mult) -> mult-inv(0))) .
--- red modelCheck(mult | mult-init(7,0), [] (pgm-or-skip(mult) -> mult-inv(0))) .
--- red modelCheck(mult | mult-init(0,7), [] (pgm-or-skip(mult) -> mult-inv(0))) .
--- red modelCheck(mult | mult-init(2,2), [] (pgm-or-skip(mult) -> mult-inv(4))) .
--- red modelCheck(mult | mult-init(3,2), [] (pgm-or-skip(mult) -> mult-inv(6))) .
--- red modelCheck(mult | mult-init(2,3), [] (pgm-or-skip(mult) -> mult-inv(6))) .
--- red modelCheck(mult | mult-init(3,3), [] (pgm-or-skip(mult) -> mult-inv(9))) .

mod FACTORIAL is pr IMP-SEMANTICS .
  op fac      : -> Stmt [ctor] .
  op fac-init : Nat -> Memory .
  var N : Nat .
  eq fac         = while 0 < n do s := n * s ; n := (n - 1) od .
  eq fac-init(N) = {[n,N] [s,1]} .
endm

--- define your invariant and any supporting functions in this module
mod SOLUTION is pr FACTORIAL . pr EXAMPLE .
endm

--- the proof that your invariant holds from an initial state will have the form below
--- red modelCheck(fac  | fac-init (N),  [] (pgm-or-skip(fac)  -> <your invariant> )) .
